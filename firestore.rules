
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check user roles from custom claims
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isClinic(clinicId) {
      // A user is a clinic user if their UID matches the clinic document ID
      // and they have the 'clinic' claim.
      return request.auth.uid == clinicId && request.auth.token.clinic == true;
    }
    
    function isPatientOfClinic(clinicId) {
      // A user is a patient of a clinic if their UID exists in that clinic's
      // patient subcollection and they have the 'patient' claim.
      return exists(/databases/$(database)/documents/clinics/$(clinicId)/patients/$(request.auth.uid)) && request.auth.token.patient == true;
    }
    
    function isPatient() {
        return request.auth.token.patient == true;
    }

    // Admins can read/write anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Rules for the 'clinics' collection
    match /clinics/{clinicId} {
      // Admins can create/delete clinics (covered by wildcard rule)
      // Clinics can read their own document
      // Patients can read the document of the clinic they are enrolled in
      allow read: if isClinic(clinicId) || (isPatient() && request.auth.token.clinicId == clinicId);
      allow update: if isClinic(clinicId);

      // Rules for the 'patients' subcollection within a clinic
      match /patients/{patientId} {
        // A clinic can manage (create, read, update, delete) its own patients
        allow read, write, create, delete: if isClinic(clinicId);
        
        // A patient can read their own data from within the clinic they are enrolled in
        allow read: if request.auth.uid == patientId && isPatientOfClinic(clinicId);
      }
    }
  }
}
